<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
  xmlns:rabbit="http://www.springframework.org/schema/rabbit"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd">

  <!--配置 connection-factory, 指定连接 rabbitmq server 参数-->
  <rabbit:connection-factory id="connectionFactory" host="${rabbit.host}" port="${rabbit.port}"
    username="${rabbit.username}" password="${rabbit.password}" virtual-host="${rabbit.vhost}"
    channel-cache-size="${rabbit.channelCacheSize}" publisher-confirms="true"/>


  <!-- 通过指定下面的admin信息, 当前的producer中的 exchange 和 queue 会在 rabbitmq server 自动生成-->
  <rabbit:admin id="admin" connection-factory="connectionFactory"/>
  <rabbit:template id="rabbitTemplate"
    connection-factory="connectionFactory"/> <!--message-converter="jsonMessageConverter"-->

  <!--<bean id="jsonMessageConverter" class="org.springframework.amqp.support.converter.JsonMessageConverter"></bean>-->

  <!-- ###############################  直连交换机 ################################################### -->

  <!--定义queue 说明：durable:是否持久化 exclusive: 仅创建者可以使用的私有队列，断开后自动删除 auto_delete: 当所有消费客户端连接断开后，是否自动删除队列 -->
  <rabbit:queue name="register.account" durable="true" auto-delete="false" exclusive="false"/>

  <!--直连交换机 消费者需要 exchange、routingKey 与 发送者 完全相等时,才能进行接收-->
  <!--定义 direct exchange 绑定 queue-->
  <rabbit:direct-exchange name="${user.register.exchange}" durable="true" auto-delete="false">
    <rabbit:bindings>
      <rabbit:binding queue="register.account" key="${user.register.routingkey}"></rabbit:binding>
    </rabbit:bindings>
  </rabbit:direct-exchange>

  <!--定义消费者-->
  <bean id="createAccountConsumer" class="com.makesailing.neo.queue.service.CreateAccountConsumer"/>

  <rabbit:listener-container connection-factory="connectionFactory">
    <!--queue listener 观察 监听模式 ,当有消息到达时会监听通知监听所在对应队列上监听对象-->
    <rabbit:listener queues="register.account" ref="createAccountConsumer"/>
  </rabbit:listener-container>

  <!-- ################################ 扇形交换机 ################################################## -->

  <!--扇形交换机,把能接收到的消息全部发送给绑定在自己身上的队列,在路由转发的时候忽略Routing Key ,
  因为广播不需要思考,所以扇形交换机处理消息的速度也是所有交换机类型里最快的-->

  <!--定义quque-->
  <rabbit:queue name="test.queue.fanout.mail" durable="true" auto-delete="false" exclusive="false"/>
  <rabbit:queue name="test.queue.fanout.sms" durable="true" auto-delete="false" exclusive="false"/>

  <!--定义 fanout 交换机,并与queue进行绑定-->
  <rabbit:fanout-exchange name="${test.fanout.exchange}" durable="true" auto-delete="false">
    <rabbit:bindings>
      <rabbit:binding queue="test.queue.fanout.mail" ></rabbit:binding>
      <rabbit:binding queue="test.queue.fanout.sms" ></rabbit:binding>
    </rabbit:bindings>
  </rabbit:fanout-exchange>

  <!--定义其消费者-->
  <bean id="consumerSms" class="com.makesailing.neo.queue.service.FanoutConsumerSms"/>
  <bean id="consumerMail" class="com.makesailing.neo.queue.service.FanoutConsumerMail"/>


  <rabbit:listener-container connection-factory="connectionFactory">
    <rabbit:listener queues="test.queue.fanout.sms" ref="consumerSms"/>
    <rabbit:listener queues="test.queue.fanout.mail" ref="consumerMail"/>
  </rabbit:listener-container>


  <!-- ###############################  主题交换机 ################################################### -->

  <rabbit:queue name="test.queue.topic.1" durable="true" auto-delete="false" exclusive="false"/>
  <rabbit:queue name="test.queue.topic.2" durable="true" auto-delete="false" exclusive="false"/>

  <!--主题交换机-->
  <rabbit:topic-exchange name="${test.topic.exchange}" durable="true" auto-delete="false">
    <rabbit:bindings>
      <rabbit:binding queue="test.queue.topic.1"  pattern="*.orange.*" ></rabbit:binding>
      <rabbit:binding queue="test.queue.topic.2"  pattern="*.*.rabbit" ></rabbit:binding>
      <rabbit:binding queue="test.queue.topic.2"  pattern="lazy.#" ></rabbit:binding>
    </rabbit:bindings>
  </rabbit:topic-exchange>

  <!--定义消费者-->
  <bean id="consumer1" class="com.makesailing.neo.queue.service.TopicConsumer1"/>
  <bean id="consumer2" class="com.makesailing.neo.queue.service.TopicConsumer2"/>

  <rabbit:listener-container connection-factory="connectionFactory">
    <rabbit:listener queues="test.queue.topic.1" ref="consumer1"/>
    <rabbit:listener queues="test.queue.topic.2" ref="consumer2"/>
  </rabbit:listener-container>


</beans>